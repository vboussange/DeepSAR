# This script takes as inputs rasters generated by
# MLP_project_simple_full_grad_ensemble.py and true SAR data generated by
# get_true_SAR_ensemble.py

import matplotlib.pyplot as plt
import pickle
import xarray as xr
import numpy as np
import geopandas as gpd
from shapely.geometry import box
from pathlib import Path
import matplotlib.colors as colors
from matplotlib.gridspec import GridSpec

# Constants for file paths
SR_DSR_RAST_DICT_PATH = Path("../../../scripts/MLP3/results/MLP_project_simple_full_grad/MLP_project_simple_full_grad.pkl")
SAR_DICT_PATH = Path("../../../scripts/MLP3/results/true_SAR/true_SAR.pkl")

def load_data(sr_dsr_rast_dict_path, sar_dict_path):
    """Load data from pickle files."""
    with open(sr_dsr_rast_dict_path, 'rb') as pickle_file:
        sr_dsr_rast_dict = pickle.load(pickle_file)["SR_dSR_rast_dict"]
    with open(sar_dict_path, 'rb') as pickle_file:
        dict_sar = pickle.load(pickle_file)["dict_SAR"]
    return sr_dsr_rast_dict, dict_sar

def create_plot():
    """Create a figure with corner and central plots using GridSpec."""
    fig = plt.figure(figsize=(9, 5))
    gs = GridSpec(3, 3, figure=fig, wspace=0., hspace=-.5,
                  width_ratios=[0.4, 0.4, 0.4], height_ratios=[0.4, 0.4, 0.4])

    # Corner plots
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[0, 2])
    ax3 = fig.add_subplot(gs[2, 0])
    ax4 = fig.add_subplot(gs[2, 2])

    # Central plot
    ax_center = fig.add_subplot(gs[1, 1])

    # Remove borders for corner plots
    for ax in [ax1, ax2, ax3, ax4]:
        ax.set_axis_off()

    return fig, ax1, ax2, ax3, ax4, ax_center

def preprocess_raster(rast, coarsen_factor=10, rolling_window=4):
    """Preprocess raster data by coarsening and smoothing."""
    return rast.coarsen(x=coarsen_factor, y=coarsen_factor, boundary="trim").mean() \
               .rolling(x=rolling_window, y=rolling_window, center=True, min_periods=4).mean()

def plot_raster(ax, rast, cmap, cbar_kwargs, norm=None, title='', **kwargs):
    """Plot raster data on a given axis."""
    rast.plot(ax=ax, cmap=cmap, cbar_kwargs=cbar_kwargs, norm=norm, **kwargs)
    ax.set_title(title)

def plot_sar(ax, dict_sar, dict_plot, area):
    """Plot SAR data on the central plot."""
    for loc, loc_info in dict_plot.items():
        sar_data = dict_sar[loc]
        color = loc_info['c']
        ax.plot(area, np.exp(sar_data["log_SR_median"]), c=color)
        ax.fill_between(
            area,
            np.exp(sar_data["log_SR_first_quantile"]),
            np.exp(sar_data["log_SR_third_quantile"]),
            color=color,
            alpha=0.4,
            linewidth=0.3
        )
    ax.set_xscale("log")
    ax.set_yscale("log")
    ax.set_xlabel("Area", bbox=dict(facecolor='white', edgecolor='none', pad=3))
    ax.set_ylabel("Species Richness (SR)", bbox=dict(facecolor='white', edgecolor='none', pad=3, alpha=0.5))

def plot_bounding_boxes(axes, dict_sar, dict_plot, buffer_size_meters=100000):
    """Plot bounding boxes on corner plots."""
    for loc, loc_info in dict_plot.items():
        sar_data = dict_sar[loc]
        color = loc_info['c']

        minx, miny, maxx, maxy = sar_data['coords_epsg_3035']
        bbox = box(minx, miny, maxx, maxy)
        gdf_bbox = gpd.GeoDataFrame({'geometry': [bbox]}, crs='EPSG:3035')
        centroid_proj = gdf_bbox.centroid.geometry.iloc[0]

        x_centroid, y_centroid = centroid_proj.coords[0]
        minx_proj = x_centroid - buffer_size_meters
        maxx_proj = x_centroid + buffer_size_meters
        miny_proj = y_centroid - buffer_size_meters
        maxy_proj = y_centroid + buffer_size_meters
        bbox_proj = box(minx_proj, miny_proj, maxx_proj, maxy_proj)
        x, y = bbox_proj.exterior.xy

        for ax in axes:
            ax.plot(x, y, color=color, linewidth=2)
    

if __name__ == '__main__':
    # Load data
    sr_dsr_rast_dict, dict_sar = load_data(SR_DSR_RAST_DICT_PATH, SAR_DICT_PATH)

    # Create figure and axes
    fig, ax1, ax2, ax3, ax4, ax_center = create_plot()

    # Plot species richness at resolution 0.5km
    cbar_kwargs = {'orientation': 'vertical', 'shrink': 0.6, 'aspect': 40,
                   'label': 'Species richness', 'pad': 0.05, 'location': 'left'}
    rast = np.exp(sr_dsr_rast_dict["5e+02"]["log_SR"])
    rast = preprocess_raster(rast)
    norm = colors.LogNorm(vmin=rast.min().item(), vmax=rast.max().item())
    plot_raster(ax1, 
                rast, 
                cmap="BuGn", 
                cbar_kwargs=cbar_kwargs, 
                # norm=norm, 
                title='Area = $2.5 \cdot 10^5$ m2')

    # Plot species richness at resolution 5km
    cbar_kwargs['location'] = 'right'
    rast = np.exp(sr_dsr_rast_dict["5e+03"]["log_SR"])
    rast = preprocess_raster(rast)
    norm = colors.LogNorm(vmin=rast.min().item(), vmax=rast.max().item())
    plot_raster(ax2, 
                rast, 
                cmap="BuGn", 
                cbar_kwargs=cbar_kwargs, 
                # norm=norm, 
                title='Area = $2.5 \cdot 10^7$ m2')

    # Plot dlogSR/dlogA at resolution 0.5km
    cbar_kwargs['label'] = 'dlogSR/dlogA'
    cbar_kwargs['location'] = 'left'
    rast = np.maximum(0., sr_dsr_rast_dict["5e+02"]["dlogSR_dlogA"])
    rast = preprocess_raster(rast)
    plot_raster(ax3, 
                rast, 
                cmap="OrRd", 
                cbar_kwargs=cbar_kwargs, 
                vmax=1.)

    # Plot dlogSR/dlogA at resolution 5km
    cbar_kwargs['location'] = 'right'
    rast = np.maximum(0., sr_dsr_rast_dict["5e+03"]["dlogSR_dlogA"])
    rast = preprocess_raster(rast)
    plot_raster(ax4, rast, cmap="OrRd", cbar_kwargs=cbar_kwargs, vmax=1.)

    # Plot SAR data on central plot
    area = np.exp(dict_sar["log_area"])
    dict_plot = {"loc1": {"c": "tab:blue"}, "loc2": {"c": "tab:red"}, "loc3": {"c": "tab:purple"}}
    plot_sar(ax_center, dict_sar, dict_plot, area)

    # Plot bounding boxes on corner plots
    axes = [ax1, ax2, ax3, ax4]
    plot_bounding_boxes(axes, dict_sar, dict_plot)

    fig.tight_layout()
    fig.savefig("figure_4.png", dpi=300, transparent=True)
    fig.savefig("figure_4.pdf", dpi=300, transparent=True)
